// <auto-generated />
using System;
using Greenfield.Web.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Greenfield.Web.Model.Migrations
{
    [DbContext(typeof(GreenfieldContext))]
    partial class GreenfieldContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Greenfield.Web.Model.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-2041646d696e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c466f08-5952-4030-8314-095370e8fa5f",
                            Email = "greenfield.admin@globomantics.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GREENFIELD.ADMIN@GLOBOMANTICS.COM",
                            NormalizedUserName = "GREENFIELD.ADMIN@GLOBOMANTICS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELLgUo3k2B/a/LRJIU5ucgdyS7oozdKeHyNikehK1tOKVpiZUgDdLlFeByjqhWXqdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BJTXU4I4ZJQKOES6TL2J5BLDWQ7ORJU4",
                            TwoFactorEnabled = false,
                            UserName = "greenfield.admin@globomantics.com"
                        },
                        new
                        {
                            Id = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eabedbb8-ff91-42db-8aff-2bb92e479b59",
                            Email = "greenfield.test@globomantics.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GREENFIELD.TEST@GLOBOMANTICS.COM",
                            NormalizedUserName = "GREENFIELD.TEST@GLOBOMANTICS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWmcKFWAlMNbjzMMiGqTn/jl7cOGBvgL+qMH9K+WHHxXZJnpP2xXH2nR1WSk6iGig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "R5USH7ZAJLIAN6I4BMBUMMBLGLENARSZ",
                            TwoFactorEnabled = false,
                            UserName = "greenfield.test@globomantics.com"
                        });
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CheckIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Availabilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-303141763031"),
                            CheckIn = "3PM",
                            CheckOut = "11AM",
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            DayOfWeek = 5,
                            Notes = "Friday availability at GreenfieldProperty1",
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-303141763032"),
                            CheckIn = "3PM",
                            CheckOut = "11AM",
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            DayOfWeek = 6,
                            Notes = "Saturday availability at GreenfieldProperty1",
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-303141763033"),
                            CheckIn = "3PM",
                            CheckOut = "11AM",
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            DayOfWeek = 0,
                            Notes = "Sunday availability at GreenfieldProperty1",
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        });
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "A plain, undeveloped field to the North of Greenfield's own headquarters.",
                            Name = "Greenfield Property #1",
                            OwnerId = new Guid("47726565-6e66-6965-6c64-2041646d696e"),
                            PropertyTypeId = new Guid("50726f70-6572-7479-5479-7065526f7567"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-50726f703032"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "A plain, but somewhat nicer field to the East of Greenfield's own headquarters.",
                            Name = "Greenfield Property #2",
                            OwnerId = new Guid("47726565-6e66-6965-6c64-2041646d696e"),
                            PropertyTypeId = new Guid("50726f70-6572-7479-5479-7065436c6561"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-50726f703033"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "A flower-filled meadow on the outskirts of town to the West of Greenfield's headquarters. Far enough to escape the city, but close enough to order pizza.",
                            Name = "Greenfield Property #3",
                            OwnerId = new Guid("47726565-6e66-6965-6c64-2041646d696e"),
                            PropertyTypeId = new Guid("50726f70-6572-7479-5479-70654d616e69"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("54657374-5573-6572-5072-6f7065723031"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "Test User's back yard.",
                            Name = "Test User Property #1",
                            OwnerId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            PropertyTypeId = new Guid("50726f70-6572-7479-5479-7065436c6561"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        });
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50726f70-6572-7479-5479-7065526f7567"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "Raw, undeveloped prairie land. May contain gopher holes. Watch your step, and bring bug repellant.",
                            Name = "Rough",
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("50726f70-6572-7479-5479-7065436c6561"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "Cleared land, fairly flat, mowed occasionally.",
                            Name = "Cleared",
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("50726f70-6572-7479-5479-70654d616e69"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Description = "A meticulously maintained meadow, matchless for meditative mollification and mitigation of metropolitan misery. May contain mosquitoes.",
                            Name = "Manicured",
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        });
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-315265733031"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-315265733032"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703031"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-325265733031"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703032"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-325265733032"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703032"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-335265733031"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703033"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        },
                        new
                        {
                            Id = new Guid("47726565-6e66-6965-6c64-335265733032"),
                            ClientId = new Guid("2b320ce5-2f11-41bf-7ee8-08da38685344"),
                            CreatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Seed Data",
                            Date = new DateTime(2022, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = new Guid("47726565-6e66-6965-6c64-50726f703033"),
                            UpdatedAt = new DateTime(2022, 3, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Seed Data"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Availability", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.Property", "Property")
                        .WithMany("Availabilities")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Property", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greenfield.Web.Model.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Reservation", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Greenfield.Web.Model.Entities.Property", "Property")
                        .WithMany("Reservations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Greenfield.Web.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.Property", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Greenfield.Web.Model.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
